#BlueJ class context
comment0.params=
comment0.target=GUIComponent()
comment0.text=\r\n\ Constructs\ a\ new\ component.\r\n
comment1.params=str
comment1.target=GUIComponent(java.lang.String)
comment1.text=\r\n\ Constructs\ a\ new\ component\ with\ the\ specified\ text.\r\n\r\n\ The\ component\ will\ not\ display\ until\ <code>repaint()</code>\ is\ called\r\n\ either\ directly\ or\ indirectly\ through\ calling\ a\ method\ like\r\n\ <code>setFont()</code>.\r\n\r\n\ @param\ str\ The\ text\ to\ display\ on\ the\ component.\r\n
comment10.params=newText
comment10.target=void\ setText(java.lang.String)
comment10.text=\r\n\ Set\ the\ text\ to\ be\ displayed.\r\n\r\n\ @param\ newText\ The\ new\ text\ to\ be\ displayed\ on\ this\ component.\r\n
comment11.params=
comment11.target=java.lang.String\ getText()
comment11.text=\r\n\ Returns\ the\ text\ for\ this\ component.\r\n\r\n\ @return\ The\ text\ displayed\ on\ this\ component.\r\n
comment12.params=newFont
comment12.target=void\ setFont(java.awt.Font)
comment12.text=\r\n\ Set\ the\ font\ to\ use\ for\ writing\ the\ component\ text.\r\n\r\n\ @param\ newFont\ The\ font\ used\ to\ write\ on\ this\ component.\r\n
comment13.params=
comment13.target=java.awt.Font\ getFont()
comment13.text=\r\n\ Returns\ the\ current\ font\ used\ by\ this\ component,\ or\ null\ if\r\n\ no\ font\ has\ been\ set.\r\n\r\n\ @return\ The\ current\ font\ or\ null\ if\ not\ font\ has\ been\ set.\r\n
comment14.params=d
comment14.target=void\ setSize(java.awt.Dimension)
comment14.text=\r\n\ Resizes\ this\ component\ so\ that\ it\ has\ width\ <code>d.width</code>\r\n\ and\ height\ <code>d.height</code>.\r\n\r\n\ @param\ d\ The\ dimension\ specifying\ the\ new\ size.\r\n
comment15.params=
comment15.target=int\ getHeight()
comment15.text=\r\n\ Returns\ the\ current\ height\ of\ this\ component.\r\n\r\n\ @return\ The\ height\ of\ this\ component.\r\n
comment16.params=
comment16.target=int\ getWidth()
comment16.text=\r\n\ Returns\ the\ current\ width\ of\ this\ component.\r\n\r\n\ @return\ The\ weight\ of\ this\ component.\r\n
comment17.params=
comment17.target=boolean\ isFixedSize()
comment17.text=\r\n\ Determines\ whether\ this\ component\ is\ set\ to\ a\ fixed\ size.\r\n\r\n\ By\ default\ a\ component\ will\ determine\ its\ own\ size\ based\ on\ properties\r\n\ such\ as\ the\ text\ to\ display.\ However,\ the\ component\ can\ be\ set\ to\ a\r\n\ fixed\ size\ using\ the\ <code>setSize()</code>\ method.\r\n\r\n\ @return\ Returns\ <code>true</code>\ if\ the\ component\ is\ a\ fixed\ size;\r\n\ \ \ \ \ \ \ \ \ <code>false</code>\ otherwise.\r\n
comment18.params=fg
comment18.target=void\ setForeground(java.awt.Color)
comment18.text=\r\n\ Set\ the\ foreground\ color\ of\ this\ component,\ such\ as\ its\ text.\r\n\r\n\ @param\ fg\ The\ desired\ foreground\ color.\r\n
comment19.params=
comment19.target=java.awt.Color\ getForeground()
comment19.text=\r\n\ Gets\ the\ foreground\ color\ of\ this\ component.\r\n\r\n\ @return\ The\ foreground\ color\ of\ this\ component.\r\n
comment2.params=str\ f\ fg\ bg
comment2.target=GUIComponent(java.lang.String,\ java.awt.Font,\ java.awt.Color,\ java.awt.Color)
comment2.text=\r\n\ Constructs\ a\ new\ component\ setting\ the\ specified\ parameters.\r\n\r\n\ The\ component\ will\ not\ display\ until\ <code>repaint()</code>\ is\ called\r\n\ either\ directly\ or\ indirectly\ through\ calling\ a\ method\ like\r\n\ <code>setFont()</code>.\r\n\r\n\ @param\ str\ The\ text\ to\ display\ on\ the\ component.\r\n\ @param\ f\ The\ font\ to\ use\ when\ displaying\ the\ text.\r\n\ @param\ fg\ The\ foreground\ color\ to\ use\ when\ displaying\ text.\r\n\ @param\ bg\ The\ background\ color\ of\ the\ component.\r\n
comment20.params=bg
comment20.target=void\ setBackground(java.awt.Color)
comment20.text=\r\n\ Set\ the\ background\ color\ of\ this\ component.\r\n\r\n\ @param\ bg\ The\ desired\ background\ color.\r\n
comment21.params=
comment21.target=java.awt.Color\ getBackground()
comment21.text=\r\n\ Gets\ the\ background\ color\ of\ this\ component.\r\n\r\n\ @return\ The\ background\ color\ of\ this\ component.\r\n
comment22.params=newBorder
comment22.target=void\ setBorder(Border)
comment22.text=\r\n\ Sets\ the\ border\ of\ this\ component.\ The\ <code>Border</code>\ object\ is\r\n\ responsible\ for\ defining\ the\ insets\ for\ the\ component\ and\ for\r\n\ rendering\ any\ border\ decorations.\r\n\r\n\ @param\ newBorder\ The\ border\ to\ be\ rendered\ for\ this\ component\r\n
comment23.params=
comment23.target=Border\ getBorder()
comment23.text=\r\n\ Returns\ the\ border\ of\ this\ component\ or\ <code>null</code>\ if\ no\r\n\ border\ is\ currently\ set.\r\n\r\n\ @return\ the\ border\ object\ for\ this\ component\r\n\ @see\ \#setBorder\r\n
comment24.params=
comment24.target=java.awt.Insets\ getInsets()
comment24.text=\r\n\ Gets\ the\ insets\ of\ this\ component,\ which\ indicate\ the\ size\ of\ this\r\n\ component's\ border.\r\n\r\n\ @return\ The\ insets\ of\ this\ component.\r\n
comment25.params=
comment25.target=java.lang.String\ toString()
comment25.text=\r\n\ Returns\ a\ string\ representation\ of\ this\ component\ and\ its\ values.\r\n\r\n\ @return\ A\ string\ representation\ of\ this\ component.\r\n
comment26.params=canFocus
comment26.target=void\ setFocusable(boolean)
comment26.text=\r\n\ Sets\ the\ focusable\ state\ of\ this\ <code>GUIComponent</code>\ to\ the\r\n\ specified\ value.\ This\ value\ overrides\ the\ component's\ default\r\n\ focusability.\r\n\r\n\ @param\ canFocus\ Determines\ whether\ this\ component\ is\ focusable.\r\n
comment27.params=
comment27.target=boolean\ isFocusable()
comment27.text=\r\n\ Returns\ whether\ this\ <code>GUIComponent</code>\ can\ receive\ focus.\r\n\r\n\ @return\ <code>true</code>\ if\ this\ <code>GUIComponent</code>\ is\r\n\ \ \ \ \ \ \ \ \ focusable;\ <code>false</code>\ otherwise.\r\n
comment28.params=
comment28.target=boolean\ requestFocus()
comment28.text=\r\n\ Requests\ that\ this\ component\ get\ the\ input\ focus.\r\n\r\n\ To\ receive\ focus,\ this\ component\ must\ be\ focusable\ and\ enabled.\r\n\ Developers\ must\ never\ assume\ that\ this\ component\ is\ the\ focus\ owner\r\n\ and\ must\ check\ the\ return\ value\ to\ be\ certain.\ If\ this\ method\ returns\r\n\ true\ then\ focus\ was\ received.\ If\ <code>false</code>\ is\ returned,\r\n\ the\ request\ failed.\r\n\r\n\ @return\ <code>true</code>\ if\ the\ focus\ succeeds\ and\ <code>false</code>\r\n\ \ \ \ \ \ \ \ \ if\ the\ focus\ fails.\r\n
comment29.params=
comment29.target=boolean\ isFocusOwner()
comment29.text=\r\n\ Returns\ <code>true</code>\ if\ this\ component\ is\ the\ focus\ owner.\r\n\r\n\ @return\ <code>true</code>\ if\ this\ component\ is\ the\ focus\ owner;\r\n\ \ \ \ \ \ \ \ \ <code>false</code>\ otherwise\r\n\ @since\ 1.4\r\n
comment3.params=str\ f\ fg\ bg\ b
comment3.target=GUIComponent(java.lang.String,\ java.awt.Font,\ java.awt.Color,\ java.awt.Color,\ Border)
comment3.text=\r\n\ Constructs\ a\ new\ component\ setting\ the\ specified\ parameters.\r\n\r\n\ The\ component\ will\ not\ display\ until\ <code>repaint()</code>\ is\ called\r\n\ either\ directly\ or\ indirectly\ through\ calling\ a\ method\ like\r\n\ <code>setFont()</code>.\r\n\r\n\ @param\ str\ The\ text\ to\ display\ on\ the\ component.\r\n\ @param\ f\ The\ font\ to\ use\ when\ displaying\ the\ text.\r\n\ @param\ fg\ The\ foreground\ color\ to\ use\ when\ displaying\ text.\r\n\ @param\ bg\ The\ background\ color\ of\ this\ component.\r\n\ @param\ b\ The\ border\ to\ be\ rendered\ for\ this\ component.\r\n
comment30.params=al
comment30.target=void\ addActionListener(ActionListener)
comment30.text=\r\n\ Adds\ a\ class\ implementing\ the\ <code>ActionListener</code>\ interface\ to\r\n\ the\ notification\ list.\r\n\r\n\ @param\ al\ The\ <code>ActionListener</code>\ to\ add\ to\ the\ notification\r\n\ \ \ \ \ \ \ \ list.\r\n
comment31.params=
comment31.target=void\ fireActionEvent()
comment31.text=\r\n\ Notifies\ all\ listeners\ that\ have\ registered\ using\r\n\ <code>addActionListener()</code>\ for\ notification.\r\n
comment32.params=al
comment32.target=void\ removeActionListener(ActionListener)
comment32.text=\r\n\ Removes\ an\ <code>ActionListener</code>\ from\ the\ component.\r\n\r\n\ @param\ al\ The\ <code>ActionListener</code>\ to\ remove.\r\n
comment33.params=w
comment33.target=void\ addedToWorld(greenfoot.World)
comment33.text=\r\n\ Make\ visible\ when\ added\ to\ world.\r\n\r\n\ @param\ w\ the\ world.\r\n
comment34.params=
comment34.target=void\ repaint()
comment34.text=\r\n\ Paints\ the\ component\ image,\ including\ the\ background,\ border\ and\ text.\r\n
comment35.params=
comment35.target=java.awt.Graphics\ getGraphics()
comment35.text=\r\n\ Gets\ a\ graphics\ context\ for\ this\ component\ from\ this\ Actor's\ image.\r\n\r\n\ @return\ a\ graphics\ context\ for\ this\ component.\r\n
comment36.params=g
comment36.target=void\ paintComponent(java.awt.Graphics)
comment36.text=\r\n\ Prepares\ the\ components\ background\ image.\r\n\r\n\ @param\ g\ \ the\ <code>Graphics</code>\ context\ in\ which\ to\ paint.\r\n
comment37.params=g
comment37.target=void\ paintBorder(java.awt.Graphics)
comment37.text=\r\n\ Paints\ the\ component's\ border,\ if\ it\ has\ one.\r\n\r\n\ @param\ g\ The\ <code>Graphics</code>\ context\ in\ which\ to\ paint.\r\n
comment38.params=g
comment38.target=void\ paintText(java.awt.Graphics)
comment38.text=\r\n\ Paints\ the\ text\ onto\ the\ components\ background\ image.\r\n\r\n\ @param\ g\ The\ <code>Graphics</code>\ context\ in\ which\ to\ paint.\r\n
comment39.params=str\ max
comment39.target=java.lang.String[]\ wordWrap(java.lang.String,\ int)
comment39.text=\r\n\ Wraps\ a\ single\ string\ into\ an\ array\ of\ strings\ for\ some\ maximum\r\n\ number\ of\ characters.\ Also\ will\ split\ lines\ on\ newlines\ or\ the\r\n\ characters\ "\\n"\ allowing\ simple\ manually\ placed\ newlines.\r\n\r\n\ @param\ str\ The\ text\ to\ word\ wrap.\r\n\ @param\ max\ The\ maximum\ number\ of\ characters\ per\ line.\r\n\ @return\ The\ word-wrapped\ lines\ of\ text.\r\n\r\n\ @author\ http\://joust.kano.net/weblog/archives/000060.html\r\n\ @author\ Ed\ Parrish\ (changed\ regex,\ added\ max,\ added\ newline\ split,\r\n\ removed\ extra\ blank\ line\ at\ end)\r\n
comment4.params=
comment4.target=void\ act()
comment4.text=\r\n\ Default\ behavior\ for\ a\ component\ that\ implements\ the\ focus\ system.\r\n\r\n\ Override\ in\ subclasses\ for\ more\ specific\ behavior.\ However,\ call\r\n\ <code>super.act()</code>\ to\ allow\ focus\ changes.\r\n
comment40.params=str\ g
comment40.target=java.awt.Dimension\ getTextDimension(java.lang.String,\ java.awt.Graphics)
comment40.text=\r\n\ Computes\ the\ dimension\ needed\ to\ display\ text\ in\ the\ specified\r\n\ <code>Graphics</code>\ context.\r\n\r\n\ @param\ str\ The\ text\ to\ display\ on\ this\ component.\r\n\ @param\ g\ The\ <code>Graphics</code>\ context\ in\ which\ to\ paint.\r\n\ @return\ the\ dimension\ (width\ and\ height)\ needed.\r\n
comment41.params=str\ g
comment41.target=java.lang.String[]\ splitLines(java.lang.String,\ java.awt.Graphics)
comment41.text=\r\n\ Splits\ the\ text\ into\ multiple\ lines\ in\ the\ specified\r\n\ <code>Graphics</code>\ context.\r\n\r\n\ If\ the\ component\ size\ is\ fixed,\ then\ the\ text\ is\ word\ wrapped\ to\ fit.\r\n\ Otherwise,\ text\ is\ split\ on\ '\\n'\ characters.\r\n\r\n\ @param\ str\ The\ text\ to\ display\ on\ this\ component.\r\n\ @param\ g\ The\ <code>Graphics</code>\ context\ in\ which\ to\ paint.\r\n\ @return\ the\ split\ lines\ of\ text.\r\n
comment5.params=idNumber
comment5.target=void\ setID(int)
comment5.text=\r\n\ Set\ an\ ID\ number\ for\ this\ component.\r\n\r\n\ @param\ idNumber\ An\ identifier\ number.\r\n
comment6.params=
comment6.target=int\ getID()
comment6.text=\r\n\ Return\ the\ ID\ number\ of\ this\ component.\r\n\r\n\ @return\ The\ ID\ number\ for\ this\ component.\r\n
comment7.params=b
comment7.target=void\ setEnabled(boolean)
comment7.text=\r\n\ Enables\ or\ disables\ the\ component,\ depending\ on\ the\ value\ of\ the\r\n\ parameter\ <code>b</code>.\r\n\r\n\ An\ enabled\ component\ can\ respond\ to\ user\ input\ and\ generate\ events.\r\n\ Components\ are\ enabled\ initially\ by\ default.\r\n\r\n\ @param\ b\ Set\ true\ to\ enable\ the\ component,\ otherwise\ false.\r\n
comment8.params=img
comment8.target=void\ makeDisabledImage(greenfoot.GreenfootImage)
comment8.text=\r\n\ Converts\ an\ image\ to\ a\ "disabled"\ version.\r\n\r\n\ @param\ img\ The\ image\ to\ "disable".\r\n
comment9.params=
comment9.target=boolean\ isEnabled()
comment9.text=\r\n\ Determines\ whether\ this\ component\ is\ enabled.\r\n\r\n\ An\ enabled\ component\ can\ respond\ to\ user\ input\ and\ generate\ events.\r\n\ Components\ are\ enabled\ initially\ by\ default.\ A\ component\ may\ be\ enabled\r\n\ or\ disabled\ by\ calling\ its\ <code>setEnabled()</code>\ method.\r\n\r\n\ @return\ Returns\ true\ if\ the\ component\ is\ enabled,\ false\ otherwise.\r\n
numComments=42
