#BlueJ class context
comment0.params=
comment0.target=Window\ getTopWindow()
comment0.text=\n\ Get\ the\ Window\ on\ top\ of\ all\ others.\n\ @return\ The\ Window\ on\ top\ of\ all\ others.\n
comment1.params=
comment1.target=boolean\ escapeClosedWindow()
comment10.params=
comment10.target=void\ adjustSize()
comment11.params=i
comment11.target=void\ setContainer(int)
comment11.text=\n\ Set\ the\ current\ Container\ to\ the\ i'th\ Container\ in\ list.\n\ @param\ i\ The\ index\ from\ list\ of\ Containers\ for\ the\ current\ Container.\n
comment12.params=c
comment12.target=void\ setContainer(Container)
comment12.text=\n\ Set\ the\ current\ (shown)\ Container\ of\ this\ Window.\n\ @param\ c\ The\ Container\ to\ be\ set\ as\ current.\ Null\ to\ be\ no\ current\ Container.\n
comment13.params=
comment13.target=int\ getMinWidthAccordingToTitle()
comment14.params=t
comment14.target=void\ setTitle(java.lang.String)
comment15.params=
comment15.target=Menu\ createMenu()
comment15.text=\n\ Create\ a\ Menu\ to\ be\ set\ at\ the\ top\ left\ of\ the\ Window,\ just\ below\ the\ title.<p>\n\ Meant\ to\ be\ called\ within\ constructor.\n\ @return\ The\ Menu\ that\ was\ created,\ that\ can\ then\ be\ built\ (put\ together).\n
comment16.params=hw
comment16.target=void\ addHelperWindow(Window)
comment16.text=\n\ Add\ a\ Window\ that\ is\ to\ close\ when\ this\ Window\ closes.<p>\n\ Meant\ to\ be\ called\ within\ constructor.\n\ @param\ hw\ Window\ that\ is\ to\ close\ when\ this\ Window\ closes.\n
comment17.params=
comment17.target=void\ act()
comment17.text=\n\ Act.\n\ Checks\ if\ the\ close\ Button\ was\ pressed,\ which\ case\ the\ Window\ will\ close.<p>\n\ Checks\ if\ "escape"\ key\ is\ pressed\ while\ top\ Window,\ which\ case\ will\ call\ callToEscape().<p>\n\ Handles\ when\ should\ call\ bringToFront().<p>\n\ Handles\ being\ dragged\ around\ the\ World.\n\ @see\ bringToFront()\n
comment18.params=
comment18.target=void\ callToEscape()
comment18.text=\n\ Called\ when\ the\ "escape"\ key\ has\ been\ pressed.\ (And\ this\ Window\ was\ the\ top\ Window).<p>\n\ Closes\ this\ Window.<p>\n\ Overwrite\ to\ remove\ effect\ or\ to\ capture\ the\ "escape"\ key\ pressed\ event\ to\ handle\ some\ current\ state.\n
comment19.params=
comment19.target=void\ redraw()
comment2.params=
comment2.target=void\ fixWindowDistribution()
comment20.params=
comment20.target=greenfoot.GreenfootImage\ draw()
comment20.text=\n\ Draw\ a\ new\ GreenfootImage\ for\ this\ Window\ with\ size\ of\ this\ Window,\ with\ its\ title\ String\ drawn\ at\ the\ top\ left\ corner.\n\ @return\ The\ GreenfootImage\ for\ this\ Window.\n
comment21.params=
comment21.target=boolean\ hasFocus()
comment21.text=\n\ Check\ if\ this\ Window\ or\ its\ current\ Container\ has\ focus.\n\ @return\ Whether\ or\ not\ this\ Window\ or\ its\ current\ Container\ has\ focus.\n
comment22.params=
comment22.target=boolean\ mousePressedOnThisOrComponents()
comment22.text=\n\ Check\ if\ this\ Window\ or\ its\ current\ Container\ has\ been\ pressed\ on\ by\ the\ mouse.<p>\n\ Called\ within\ act(),\ to\ determine\ if\ should\ call\ bringToFront().\n\ @return\ Whether\ or\ not\ this\ Window\ or\ its\ current\ Container\ has\ been\ pressed\ on\ by\ the\ mouse.\n
comment23.params=
comment23.target=void\ bringToFront()
comment23.text=\n\ Set\ this\ Window\ to\ be\ on\ top\ of\ all\ other\ Windows.\n
comment24.params=
comment24.target=boolean\ isBringingToFront()
comment25.params=x\ y
comment25.target=void\ setLocation(int,\ int)
comment25.text=\n\ Inherited\ from\ Actor,\ set\ the\ location\ of\ this\ Window\ within\ the\ World.<p>\n\ Does\ not\ allow\ itself\ from\ reaching\ off\ the\ sides\ of\ the\ World.<p>\n\ Sets\ appropriate\ locations\ for\ each\ WindowComponent\ in\ list.\n\ @param\ x\ X-coordinate\ in\ World.\n\ @param\ y\ Y-coordinate\ in\ World.\n
comment26.params=
comment26.target=void\ snugMenu()
comment27.params=
comment27.target=void\ removeFromWorld()
comment27.text=\n\ Remove\ this\ Window\ and\ its\ WindowComponents\ from\ the\ World.\n
comment28.params=h
comment28.target=void\ hide(boolean)
comment28.text=\n\ Set\ whethor\ or\ not\ this\ Window\ is\ to\ be\ hidden.<p>\n\ If\ is\ set\ to\ show,\ will\ be\ added\ to\ or\ removed\ from\ World\ according\ to\ given\ hidden\ status.\n\ @param\ h\ Wethor\ or\ not\ this\ Window\ is\ to\ be\ hidden.\n
comment29.params=
comment29.target=void\ toggleShow()
comment29.text=\n\ Switch\ between\ being\ set\ to\ show\ and\ not.<p>\n\ If\ hidden\ status\ is\ false,\ will\ be\ added\ or\ removed\ from\ World\ according\ to\ new\ show\ status.\n
comment3.params=title\ alwaysOpenToDefault\ closeWhenLoseFocus\ minWidth\ minHeight
comment3.target=Window(java.lang.String,\ boolean,\ boolean,\ int,\ int)
comment3.text=\n\ Create\ a\ new\ Window.\n\ @param\ title\ String\ that\ appears\ at\ the\ top\ left\ corner\ of\ the\ Window.\n\ @param\ alwaysOpenToDefault\ Whether\ or\ not\ this\ Window\ will\ always\ relocate\ to\ its\ default\ location\ when\ added\ to\ the\ World.\n\ @param\ closeWhenLoseFocus\ Whether\ or\ not\ this\ Window\ will\ close\ if\ it\ loses\ focus.\ (And\ its\ current\ Container\ does\ not\ have\ focus).\n\ @param\ minWidth\ The\ minimum\ width\ of\ the\ Window.\n\ @param\ minHeight\ The\ mimimum\ height\ of\ the\ Window.\n\ @see\ getDefaultLocation()\n
comment30.params=
comment30.target=void\ addToScreen()
comment30.text=\n\ Add\ this\ Window\ to\ the\ World.\n
comment31.params=
comment31.target=java.awt.Point\ getDefaultLocation()
comment31.text=\n\ Get\ the\ default\ location\ at\ which\ to\ be\ added\ into\ the\ World.<p>\n\ Default\ is\ the\ middle\ of\ the\ World.<p>\n\ Overwrite\ to\ change.\n\ @return\ The\ default\ location\ at\ which\ to\ be\ added\ into\ the\ World.\n
comment32.params=
comment32.target=boolean\ isTopWindow()
comment32.text=\n\ Check\ whether\ or\ not\ this\ Window\ is\ on\ top\ of\ all\ other\ Windows.\n\ @return\ Whether\ or\ not\ this\ Window\ is\ on\ top\ of\ all\ other\ Windows.\n
comment33.params=world
comment33.target=void\ addedToWorld(greenfoot.World)
comment33.text=\n\ Inherited\ from\ Actor,\ is\ called\ when\ this\ Window\ is\ added\ to\ World.<p>\n\ Adds\ each\ WindowComponent\ from\ list\ to\ World\ as\ well\ (except\ during\ duration\ of\ a\ bringToFront()\ call)\ if\ the\ WindowComponent\ is\ not\ hiding.\n\ @param\ world\ World\ to\ be\ added\ to.\n\ @see\ bringToFront()\n
comment34.params=
comment34.target=void\ initializeOpen()
comment34.text=\n\ Called\ when\ the\ Window\ is\ added\ to\ the\ World\ (except\ during\ duration\ of\ a\ bringToFront()\ call).<p>\n\ If\ this\ Window\ closes\ when\ it\ loses\ focus,\ the\ method\ gives\ the\ Window\ focus\ so\ to\ not\ close\ immediately.<p>\n\ Overwrite\ to\ initialize/reset\ subclass\ statuses.\n\ @see\ bringToFront()\n
comment4.params=title\ alwaysOpenToDefault\ closeWhenLoseFocus
comment4.target=Window(java.lang.String,\ boolean,\ boolean)
comment4.text=\n\ Create\ a\ new\ Window.\n\ @param\ title\ String\ that\ appears\ at\ the\ top\ left\ corner\ of\ the\ Window.\n\ @param\ alwaysOpenToDefault\ Whether\ or\ not\ this\ Window\ will\ always\ relocate\ to\ its\ default\ location\ when\ added\ to\ the\ World.\n\ @param\ closeWhenLoseFocus\ Whether\ or\ not\ this\ Window\ will\ close\ if\ it\ loses\ focus.\ (And\ its\ current\ Container\ does\ not\ have\ focus).\n\ @see\ getDefaultLocation()\n
comment5.params=title\ alwaysOpenToDefault
comment5.target=Window(java.lang.String,\ boolean)
comment5.text=\n\ Create\ a\ new\ Window.\n\ @param\ title\ String\ that\ appears\ at\ the\ top\ left\ corner\ of\ the\ Window.\n\ @param\ alwaysOpenToDefault\ Whether\ or\ not\ this\ Window\ will\ always\ relocate\ to\ its\ default\ location\ when\ added\ to\ the\ World.\n\ @see\ getDefaultLocation()\n
comment6.params=title
comment6.target=Window(java.lang.String)
comment6.text=\n\ Create\ a\ new\ Window.\n\ @param\ title\ String\ that\ appears\ at\ the\ top\ left\ corner\ of\ the\ Window.\n
comment7.params=
comment7.target=void\ keepSizeInWorld()
comment8.params=c
comment8.target=void\ addContainer(Container)
comment8.text=\n\ Add\ given\ Container\ to\ this\ Window's\ list\ of\ Containers.<p>\n\ Given\ Container\ becomes\ the\ current\ Container\ if\ no\ Container\ exists\ before\ it.<p>\n\ Meant\ to\ be\ called\ within\ constructor\ only.\n\ @param\ c\ Container\ to\ be\ added.\n
comment9.params=
comment9.target=void\ addContainerToWorld()
comment9.text=\n\ Add\ the\ current\ Container\ to\ the\ World.\n
numComments=35
