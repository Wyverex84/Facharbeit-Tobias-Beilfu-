#BlueJ class context
comment0.params=
comment0.target=Polygon3D()
comment0.text=\r\n\ \ \ \ \ \ \ \ Creates\ an\ empty\ polygon\ that\ can\ be\ used\ as\ a\ "scratch"\r\n\ \ \ \ \ \ \ \ polygon\ for\ transforms,\ projections,\ etc.\r\n
comment1.params=v0\ v1\ v2
comment1.target=Polygon3D(Vector3D,\ Vector3D,\ Vector3D)
comment1.text=\r\n\ \ \ \ \ \ \ Creates\ a\ new\ Polygon3D\ with\ the\ specified\ vertices.\r\n
comment10.params=u
comment10.target=void\ subtract(Vector3D)
comment11.params=xform
comment11.target=void\ add(Transform3D)
comment12.params=xform
comment12.target=void\ subtract(Transform3D)
comment13.params=xform
comment13.target=void\ addRotation(Transform3D)
comment14.params=xform
comment14.target=void\ subtractRotation(Transform3D)
comment15.params=
comment15.target=Vector3D\ calcNormal()
comment15.text=\r\n\ \ \ \ \ \ \ \ Calculates\ the\ unit-vector\ normal\ of\ this\ polygon.\r\n\ \ \ \ \ \ \ \ This\ method\ uses\ the\ first,\ second,\ and\ third\ vertices\r\n\ \ \ \ \ \ \ \ to\ calcuate\ the\ normal,\ so\ if\ these\ vertices\ are\r\n\ \ \ \ \ \ \ \ collinear,\ this\ method\ will\ not\ work.\ In\ this\ case,\r\n\ \ \ \ \ \ \ \ you\ can\ get\ the\ normal\ from\ the\ bounding\ rectangle.\r\n\ \ \ \ \ \ \ \ Use\ setNormal()\ to\ explicitly\ set\ the\ normal.\r\n\ \ \ \ \ \ \ \ This\ method\ uses\ static\ objects\ in\ the\ Polygon3D\ class\r\n\ \ \ \ \ \ \ \ for\ calculations,\ so\ this\ method\ is\ not\ thread-safe\ across\r\n\ \ \ \ \ \ \ \ all\ instances\ of\ Polygon3D.\r\n
comment16.params=
comment16.target=Vector3D\ getNormal()
comment16.text=\r\n\ \ \ \ \ \ \ \ Gets\ the\ normal\ of\ this\ polygon.\ Use\ calcNormal()\ if\r\n\ \ \ \ \ \ \ \ any\ vertices\ have\ changed.\r\n
comment17.params=n
comment17.target=void\ setNormal(Vector3D)
comment17.text=\r\n\ \ \ \ \ \ \ \ Sets\ the\ normal\ of\ this\ polygon.\r\n
comment18.params=u
comment18.target=boolean\ isFacing(Vector3D)
comment18.text=\r\n\ \ \ \ \ \ \ \ Tests\ if\ this\ polygon\ is\ facing\ the\ specified\ location.\r\n\ \ \ \ \ \ \ \ This\ method\ uses\ static\ objects\ in\ the\ Polygon3D\ class\r\n\ \ \ \ \ \ \ \ for\ calculations,\ so\ this\ method\ is\ not\ thread-safe\ across\r\n\ \ \ \ \ \ \ \ all\ instances\ of\ Polygon3D.\r\n
comment19.params=clipZ
comment19.target=boolean\ clip(float)
comment19.text=\r\n\ \ \ \ \ \ \ \ Clips\ this\ polygon\ so\ that\ all\ vertices\ are\ in\ front\ of\r\n\ \ \ \ \ \ \ \ the\ clip\ plane,\ clipZ\ (in\ other\ words,\ all\ vertices\r\n\ \ \ \ \ \ \ \ have\ z\ <\=\ clipZ).\r\n\ \ \ \ \ \ \ \ The\ value\ of\ clipZ\ should\ not\ be\ 0,\ as\ this\ causes\r\n\ \ \ \ \ \ \ \ divide-by-zero\ problems.\r\n\ \ \ \ \ \ \ \ Returns\ true\ if\ the\ polygon\ is\ at\ least\ partially\ in\r\n\ \ \ \ \ \ \ \ front\ of\ the\ clip\ plane.\r\n
comment2.params=v0\ v1\ v2\ v3
comment2.target=Polygon3D(Vector3D,\ Vector3D,\ Vector3D,\ Vector3D)
comment2.text=\r\n\ \ \ \ \ \ \ \ Creates\ a\ new\ Polygon3D\ with\ the\ specified\ vertices.\ All\r\n\ \ \ \ \ \ \ \ the\ vertices\ are\ assumed\ to\ be\ in\ the\ same\ plane.\r\n
comment20.params=index\ x\ y\ z
comment20.target=void\ insertVertex(int,\ float,\ float,\ float)
comment20.text=\r\n\ \ \ \ \ \ \ \ Inserts\ a\ new\ vertex\ at\ the\ specified\ index.\r\n
comment21.params=index
comment21.target=void\ deleteVertex(int)
comment21.text=\r\n\ \ \ \ \ \ \ \ Delete\ the\ vertex\ at\ the\ specified\ index.\r\n
comment22.params=index\ vertex
comment22.target=void\ insertVertex(int,\ Vector3D)
comment22.text=\r\n\ \ \ \ \ \ \ \ Inserts\ a\ vertex\ into\ this\ polygon\ at\ the\ specified\ index.\r\n\ \ \ \ \ \ \ \ The\ exact\ vertex\ in\ inserted\ (not\ a\ copy).\r\n
comment3.params=vertices
comment3.target=Polygon3D(Vector3D[])
comment3.text=\r\n\ \ \ \ \ \ \ \ Creates\ a\ new\ Polygon3D\ with\ the\ specified\ vertices.\ All\r\n\ \ \ \ \ \ \ \ the\ vertices\ are\ assumed\ to\ be\ in\ the\ same\ plane.\r\n
comment4.params=polygon
comment4.target=void\ setTo(Polygon3D)
comment4.text=\r\n\ \ \ \ \ \ \ \ Sets\ this\ polygon\ to\ the\ same\ vertices\ as\ the\ specfied\r\n\ \ \ \ \ \ \ \ polygon.\r\n
comment5.params=length
comment5.target=void\ ensureCapacity(int)
comment5.text=\r\n\ \ \ \ \ \ \ \ Ensures\ this\ polgon\ has\ enough\ capacity\ to\ hold\ the\r\n\ \ \ \ \ \ \ \ specified\ number\ of\ vertices.\r\n
comment6.params=
comment6.target=int\ getNumVertices()
comment6.text=\r\n\ \ \ \ \ \ \ \ Gets\ the\ number\ of\ vertices\ this\ polygon\ has.\r\n
comment7.params=index
comment7.target=Vector3D\ getVertex(int)
comment7.text=\r\n\ \ \ \ \ \ \ \ Gets\ the\ vertex\ at\ the\ specified\ index.\r\n
comment8.params=view
comment8.target=void\ project(ViewWindow)
comment8.text=\r\n\ \ \ \ \ \ \ \ Projects\ this\ polygon\ onto\ the\ view\ window.\r\n
comment9.params=u
comment9.target=void\ add(Vector3D)
numComments=23
