#BlueJ class context
comment0.params=
comment0.target=Vector3D()
comment0.text=\r\n\ \ \ \ \ \ \ \ Creates\ a\ new\ Vector3D\ at\ (0,0,0).\r\n
comment1.params=v
comment1.target=Vector3D(Vector3D)
comment1.text=\r\n\ \ \ \ \ \ \ \ Creates\ a\ new\ Vector3D\ with\ the\ same\ values\ as\ the\r\n\ \ \ \ \ \ \ \ specified\ Vector3D.\r\n
comment10.params=v
comment10.target=void\ subtract(Vector3D)
comment10.text=\r\n\ \ \ \ \ \ \ \ Subtracts\ the\ specified\ vector\ from\ this\ vector.\r\n
comment11.params=s
comment11.target=void\ multiply(float)
comment11.text=\r\n\ \ \ \ \ \ \ \ Multiplies\ this\ vector\ by\ the\ specified\ value.\ The\ new\r\n\ \ \ \ \ \ \ \ length\ of\ this\ vector\ will\ be\ length()*s.\r\n
comment12.params=s
comment12.target=void\ divide(float)
comment12.text=\r\n\ \ \ \ \ \ \ \ Divides\ this\ vector\ by\ the\ specified\ value.\ The\ new\r\n\ \ \ \ \ \ \ \ length\ of\ this\ vector\ will\ be\ length()/s.\r\n
comment13.params=
comment13.target=float\ length()
comment13.text=\r\n\ \ \ \ \ \ \ \ Returns\ the\ length\ of\ this\ vector\ as\ a\ float.\r\n
comment14.params=
comment14.target=void\ normalize()
comment14.text=\r\n\ \ \ \ \ \ \ \ Converts\ this\ Vector3D\ to\ a\ unit\ vector,\ or\ in\ other\r\n\ \ \ \ \ \ \ \ words,\ a\ vector\ of\ length\ 1.\ Same\ as\ calling\r\n\ \ \ \ \ \ \ \ v.divide(v.length()).\r\n
comment15.params=
comment15.target=java.lang.String\ toString()
comment15.text=\r\n\ \ \ \ \ \ \ \ Converts\ this\ Vector3D\ to\ a\ String\ representation.\r\n
comment16.params=angle
comment16.target=void\ rotateX(float)
comment16.text=\r\n\ \ \ \ \ \ \ \ Rotate\ this\ vector\ around\ the\ x\ axis\ the\ specified\ amount.\r\n\ \ \ \ \ \ \ \ The\ specified\ angle\ is\ in\ radians.\ Use\ Math.toRadians()\ to\r\n\ \ \ \ \ \ \ \ convert\ from\ degrees\ to\ radians.\r\n
comment17.params=angle
comment17.target=void\ rotateY(float)
comment17.text=\r\n\ \ \ \ \ \ \ \ Rotate\ this\ vector\ around\ the\ y\ axis\ the\ specified\ amount.\r\n\ \ \ \ \ \ \ \ The\ specified\ angle\ is\ in\ radians.\ Use\ Math.toRadians()\ to\r\n\ \ \ \ \ \ \ \ convert\ from\ degrees\ to\ radians.\r\n
comment18.params=angle
comment18.target=void\ rotateZ(float)
comment18.text=\r\n\ \ \ \ \ \ \ \ Rotate\ this\ vector\ around\ the\ z\ axis\ the\ specified\ amount.\r\n\ \ \ \ \ \ \ \ The\ specified\ angle\ is\ in\ radians.\ Use\ Math.toRadians()\ to\r\n\ \ \ \ \ \ \ \ convert\ from\ degrees\ to\ radians.\r\n
comment19.params=cosAngle\ sinAngle
comment19.target=void\ rotateX(float,\ float)
comment19.text=\r\n\ \ \ \ \ \ \ \ Rotate\ this\ vector\ around\ the\ x\ axis\ the\ specified\ amount,\r\n\ \ \ \ \ \ \ \ using\ pre-computed\ cosine\ and\ sine\ values\ of\ the\ angle\ to\r\n\ \ \ \ \ \ \ \ rotate.\r\n
comment2.params=x\ y\ z
comment2.target=Vector3D(float,\ float,\ float)
comment2.text=\r\n\ \ \ \ \ \ \ \ Creates\ a\ new\ Vector3D\ with\ the\ specified\ (x,\ y,\ z)\ values.\r\n
comment20.params=cosAngle\ sinAngle
comment20.target=void\ rotateY(float,\ float)
comment20.text=\r\n\ \ \ \ \ \ \ \ Rotate\ this\ vector\ around\ the\ y\ axis\ the\ specified\ amount,\r\n\ \ \ \ \ \ \ \ using\ pre-computed\ cosine\ and\ sine\ values\ of\ the\ angle\ to\r\n\ \ \ \ \ \ \ \ rotate.\r\n
comment21.params=cosAngle\ sinAngle
comment21.target=void\ rotateZ(float,\ float)
comment21.text=\r\n\ \ \ \ \ \ \ \ Rotate\ this\ vector\ around\ the\ y\ axis\ the\ specified\ amount,\r\n\ \ \ \ \ \ \ \ using\ pre-computed\ cosine\ and\ sine\ values\ of\ the\ angle\ to\r\n\ \ \ \ \ \ \ \ rotate.\r\n
comment22.params=xform
comment22.target=void\ add(Transform3D)
comment22.text=\r\n\ \ \ \ \ \ \ \ Adds\ the\ specified\ transform\ to\ this\ vector.\ This\ vector\r\n\ \ \ \ \ \ \ \ is\ first\ rotated,\ then\ translated.\r\n
comment23.params=xform
comment23.target=void\ subtract(Transform3D)
comment23.text=\r\n\ \ \ \ \ \ \ \ Subtracts\ the\ specified\ transform\ to\ this\ vector.\ This\r\n\ \ \ \ \ \ \ \ vector\ translated,\ then\ rotated.\r\n
comment24.params=xform
comment24.target=void\ addRotation(Transform3D)
comment24.text=\r\n\ \ \ \ \ \ \ \ Rotates\ this\ vector\ with\ the\ angle\ of\ the\ specified\r\n\ \ \ \ \ \ \ \ transform.\r\n
comment25.params=xform
comment25.target=void\ subtractRotation(Transform3D)
comment25.text=\r\n\ \ \ \ \ \ \ \ Rotates\ this\ vector\ with\ the\ opposite\ angle\ of\ the\r\n\ \ \ \ \ \ \ \ specified\ transform.\r\n
comment26.params=v
comment26.target=float\ getDotProduct(Vector3D)
comment26.text=\r\n\ \ \ \ \ \ \ \ Returns\ the\ dot\ product\ of\ this\ vector\ and\ the\ specified\r\n\ \ \ \ \ \ \ \ vector.\r\n
comment27.params=u\ v
comment27.target=void\ setToCrossProduct(Vector3D,\ Vector3D)
comment27.text=\r\n\ \ \ \ \ \ \ \ Sets\ this\ vector\ to\ the\ cross\ product\ of\ the\ two\r\n\ \ \ \ \ \ \ \ specified\ vectors.\ Either\ of\ the\ specified\ vectors\ can\r\n\ \ \ \ \ \ \ \ be\ this\ vector.\r\n
comment3.params=obj
comment3.target=boolean\ equals(java.lang.Object)
comment3.text=\r\n\ \ \ \ \ \ \ \ Checks\ if\ this\ Vector3D\ is\ equal\ to\ the\ specified\ Object.\r\n\ \ \ \ \ \ \ \ They\ are\ equal\ only\ if\ the\ specified\ Object\ is\ a\ Vector3D\r\n\ \ \ \ \ \ \ \ and\ the\ two\ Vector3D's\ x,\ y,\ and\ z\ coordinates\ are\ equal.\r\n
comment4.params=x\ y\ z
comment4.target=boolean\ equals(float,\ float,\ float)
comment4.text=\r\n\ \ \ \ \ \ \ \ Checks\ if\ this\ Vector3D\ is\ equal\ to\ the\ specified\r\n\ \ \ \ \ \ \ \ x,\ y,\ and\ z\ coordinates.\r\n
comment5.params=v
comment5.target=void\ setTo(Vector3D)
comment5.text=\r\n\ \ \ \ \ \ \ \ Sets\ the\ vector\ to\ the\ same\ values\ as\ the\ specified\r\n\ \ \ \ \ \ \ \ Vector3D.\r\n
comment6.params=x\ y\ z
comment6.target=void\ setTo(float,\ float,\ float)
comment6.text=\r\n\ \ \ \ \ \ \ \ Sets\ this\ vector\ to\ the\ specified\ (x,\ y,\ z)\ values.\r\n
comment7.params=x\ y\ z
comment7.target=void\ add(float,\ float,\ float)
comment7.text=\r\n\ \ \ \ \ \ \ \ Adds\ the\ specified\ (x,\ y,\ z)\ values\ to\ this\ vector.\r\n
comment8.params=x\ y\ z
comment8.target=void\ subtract(float,\ float,\ float)
comment8.text=\r\n\ \ \ \ \ \ \ \ Subtracts\ the\ specified\ (x,\ y,\ z)\ values\ to\ this\ vector.\r\n
comment9.params=v
comment9.target=void\ add(Vector3D)
comment9.text=\r\n\ \ \ \ \ \ \ \ Adds\ the\ specified\ vector\ to\ this\ vector.\r\n
numComments=28
