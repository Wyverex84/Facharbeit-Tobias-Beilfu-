------------------------------------------------------------------------
This is the project README file. Here, you should describe your project.
Tell the reader (someone who does not know anything about this project)
all he/she needs to know. The comments should usually include at least:
------------------------------------------------------------------------

PROJECT TITLE:              RATSERIZER
PURPOSE OF PROJECT:         TO IMPLEMENT 3D INTO GREENFOOT
VERSION or DATE:            VERSION 1.5
AUTHORS:                    BUILDERBOY2005
USER INSTRUCTIONS:

Objects:  
    In this rasterizer, objects are represented by an
array of points.  Polygons are created by linking these
points together.  Currently only 3 and 4 sided poylgons
are supported, but there is no limitaton to the number
of sides, only the DISTANCE() RENDERABLE() and GETPOLYGON()
methods of the obect class need to be modified, and the
modification is not significantly different from the existing
setup.

OBJECTS:
Objects have both a location:
    x,y,z where x is left right
                y is up down
                z is in out
and a rotation:
    x,y where x is absolute rotation about the x axis
              y is relative rotation about a y axis
              
NOTE: THE Y ROTATION IS PERFORMED AFTER THE X ROTATION
        THIS HAS THE EFFECT OF ROTATING THE OBJECT AROUND
        THE Y AXIS, AFTER THE Y AXIS HAS BEEN ROTATED X ALONG
        WITH THE OBJECT
        
    z rotation is not supported, and while it could be implemented,
    the same problem with y rotation would occur with z rotation, exept
    the z axis would be rotated x, then rotated y, before the object is
    rotated z.  This might result in GIMBAL LOCK.  To read more
    about gimbal lock, look it up on the internet :)

    
THE RASTER:
    The raster uses the 2D pointed generated by the getPoint method
and the polygons generated by the getPolygon method to draw the object
onto the background with a primitive z-buffer.

    The z-buffer is not a true z-buffer, as it only uses z-sorting.  Meaning
it draws the polygons from back to front.  This means you might encounter
some dislpay problems for certain obects, and when objects intersect eachother

    Objects can be added or removed from the rater.  When an object is added
to the raster, the raster will display it along with all other objects
currently in the raster.  It doesn't matter in what order obects are added
to the raster, they are always displayed with the appropriate z-buffering

NOTE:Objects not on the screen will not be rendered or added to the z-buffer

Objects can be removed from the raster, resulting that EVERY instance of THAT
object is removed form the raster and will not be displayed.  Objects can
still be active and not be in the raster

THE CAMERA:
    The camera has coordinates x,y,z just like an object, but it does not have
rotation, although this could be changes by the appropriate modification
to the getPoints method of the object class.  Note that is would double
the amount of trigonometry involved in displaying a single polygon



