#BlueJ class context
comment0.target=Scores
comment0.text=\r\n\ This\ class\ displays\ all\ the\ users\ and\ their\ scores\ nicely.\ The\ way\ to\ do\ it\ is\ just\ to\r\n\ set\ the\ active\ world\ as\ this\ one,\ and\ set\ a\ return\ world.\r\n\r\n\ @author\ Yehuda\r\n\ @version\ 4/21/2017\ -\ MM/DD/YYYY\r\n
comment1.params=
comment1.target=Scores()
comment1.text=\r\n\ Constructor\ for\ objects\ of\ class\ Scores.\ Sets\ the\ back\ button\ to\ go\ to\ a\ new\ blank\r\n\ world\ of\ 600x400.\ Cannot\ be\ called\ from\ other\ classes.\r\n\r\n
comment10.params=e
comment10.target=void\ refreshButtonActionPerformed(java.awt.event.ActionEvent)
comment10.text=\r\n\ This\ method\ gets\ called\ automatically\ when\ the\ refreshButton\ gets\ clicked.\ It\r\n\ reloads\ the\ contents\ of\ the\ list.\r\n\r\n\ @param\ e\ the\ ActionEvent\ that\ called\ this\ method\r\n
comment11.params=
comment11.target=java.lang.Void\ doInBackground()
comment12.params=
comment12.target=void\ done()
comment13.params=e
comment13.target=void\ propertyChange(java.beans.PropertyChangeEvent)
comment14.params=e
comment14.target=void\ findMeButtonActionPerformed(java.awt.event.ActionEvent)
comment14.text=\r\n\ This\ method\ gets\ called\ automatically\ when\ the\ findMeButton\ is\ clicked.\ It\ sets\ the\r\n\ selected\ item\ in\ the\ list\ as\ the\ current\ user's.\r\n\r\n\ @param\ e\ the\ ActionEvent\ that\ called\ this\ method\r\n
comment15.params=e
comment15.target=void\ searchTextFieldUpdate(javax.swing.event.DocumentEvent)
comment15.text=\r\n\ This\ method\ is\ called\ automatically\ when\ a\ change\ has\ been\ made\ the\ the\r\n\ searchTextField.\ It\ makes\ the\ list\ only\ show\ items\ that\ the\ name\ of\ that\ user\r\n\ starts\ with\ the\ the\ text\ in\ the\ field.\r\n\r\n\ @param\ e\ the\ DocumentEvent\ that\ called\ this\ method\r\n
comment16.params=
comment16.target=void\ worldChanged()
comment16.text=\r\n\ This\ method\ gets\ called\ when\ the\ world\ is\ about\ to\ get\ switched\ to\ the\ one\r\n\ specified\ for\ the\ "Back"\ button.\ By\ default\ it's\ empty,\ and\ is\ meant\ to\ be\r\n\ overridden.\r\n
comment2.params=homeWorld
comment2.target=Scores(greenfoot.World)
comment2.text=\r\n\ Constructor\ for\ objects\ of\ class\ Scores.\ Sets\ the\ back\ button\ to\ go\ to\ the\r\n\ specified\ world,\ and\ does\ not\ go\ to\ the\ current\ user\ in\ the\ list.\r\n\r\n\ @param\ homeWorld\ the\ world\ to\ go\ to\ when\ the\ "Back"\ button\ is\ pressed\r\n
comment3.params=homeWorld\ findMe
comment3.target=Scores(greenfoot.World,\ boolean)
comment3.text=\r\n\ Constructor\ for\ objects\ of\ class\ Scores.\ Sets\ the\ "Back"\ button\ to\ go\ to\ the\r\n\ specified\ world,\ and\ goes\ to\ the\ current\ user\ in\ the\ list\ if\ {@code\ findMe}\ is\r\n\ true.\r\n\r\n\ @param\ homeWorld\ the\ world\ to\ go\ to\ when\ the\ "Back"\ button\ is\ pressed\r\n\ @param\ findMe\ \ \ \ if\ true,\ then\ the\ list\ will\ go\ straight\ to\ the\ current\ user\r\n
comment4.params=list\ value\ index\ isSelected\ cellHasFocus
comment4.target=java.awt.Component\ getListCellRendererComponent(javax.swing.JList,\ java.lang.Object,\ int,\ boolean,\ boolean)
comment5.params=e
comment5.target=void\ changedUpdate(javax.swing.event.DocumentEvent)
comment6.params=e
comment6.target=void\ insertUpdate(javax.swing.event.DocumentEvent)
comment7.params=e
comment7.target=void\ removeUpdate(javax.swing.event.DocumentEvent)
comment8.params=e
comment8.target=void\ backButtonActionPerformed(java.awt.event.ActionEvent)
comment8.text=\r\n\ This\ method\ gets\ called\ automatically\ when\ the\ backButton\ gets\ pressed.\ It\ goes\ to\r\n\ the\ specified\ world.\r\n\r\n\ @param\ e\ the\ ActionEvent\ that\ called\ the\ method\r\n
comment9.params=list\ value\ index\ isSelected\ cellHasFocus
comment9.target=java.awt.Component\ usersJListGetListCellRendererComponent(javax.swing.JList,\ java.lang.Object,\ int,\ boolean,\ boolean)
comment9.text=\r\n\ Return\ a\ component\ that\ has\ been\ configured\ to\ display\ the\ specified\ value.\ That\r\n\ component's\ <code>paint</code>\ method\ is\ then\ called\ to\ "render"\ the\ cell.\ If\ it\ is\r\n\ necessary\ to\ compute\ the\ dimensions\ of\ a\ list\ because\ the\ list\ cells\ do\ not\ have\ a\r\n\ fixed\ size,\ this\ method\ is\ called\ to\ generate\ a\ component\ on\ which\r\n\ <code>getPreferredSize</code>\ can\ be\ invoked.\r\n\r\n\ @param\ list\ \ \ \ \ \ \ \ \ The\ JList\ we're\ painting.\r\n\ @param\ value\ \ \ \ \ \ \ \ The\ value\ returned\ by\ list.getModel().getElementAt(index).\r\n\ @param\ index\ \ \ \ \ \ \ \ The\ cells\ index.\r\n\ @param\ isSelected\ \ \ True\ if\ the\ specified\ cell\ was\ selected.\r\n\ @param\ cellHasFocus\ True\ if\ the\ specified\ cell\ has\ the\ focus.\r\n\r\n\ @return\ A\ component\ whose\ paint()\ method\ will\ render\ the\ specified\ value.\r\n\r\n\ @see\ JList\r\n\ @see\ ListSelectionModel\r\n\ @see\ ListModel\r\n
numComments=17
